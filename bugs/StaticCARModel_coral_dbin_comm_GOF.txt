
    
    model{
    
    ## priors 
    # CAR prior distribution for spatial random effects:
   ## priors 
    for (k in 1:nspec) {
    # CAR prior distribution for spatial random effects:
       rho[k,1:nsite] ~ car.normal(adj[], weights[], num[], spacetau[k])
       # hyperprior of rho 
       spacesigma[k] ~ dunif(0,5)
       spacetau[k]  <- 1/(spacesigma[k]*spacesigma[k])
    }
    
    
    # regression parameters
    for (k in 1:nspec) {
        b0[k] ~ dunif(-10,10)
    }

    ## likelihood
    for (k in 1:nspec) {
       for(i in 1:nsite) {
    
          ## cover dataset 
          C[i,k] ~ dbin(p[i,k],N[i]) ## N is constant over sites
          
          # model for p
          mup[i,k] <- b0[k] + rho[k,i]
          mup.lim[i,k] <- min(10,max(-10,mup[i,k]))
          logit(p[i,k]) <- mup.lim[i,k]
       }
    }
    
   # Assess model fit using a sums-of-squares-type discrepancy
   for (k in 1:nspec) {
      for (i in 1:nsite) {
         residual[i,k] <- C[i,k]-p[i,k] # Residuals for observed data
         predicted[i,k] <- p[i,k] # Predicted values
         sq[i,k] <- pow(residual[i,k], 2) # Squared residuals for observed data
    
         # Generate replicate data and compute fit stats for them
         C.new[i,k] ~ dbin(p[i,k], N[i]) # one new data set at each MCMC iteration
         sq.new[i,k] <- pow(C.new[i,k]-predicted[i,k], 2) # Squared residuals for new data
      }
      fit[k] <- sum(sq[,k]) # Sum of squared residuals for actual data set
      fit.new[k] <- sum(sq.new[,k]) # Sum of squared residuals for new data set
      test[k] <- step(fit.new[k] - fit[k]) # Test whether new data set more extreme
      bpvalue[k] <- mean(test[k]) # Bayesian p-value
   }

   # derived parameters
   # mean probability per species
   for (k in 1:nspec) {
      meanP [k] <- mean(p[,k]) 
   }

   # number of sites per species
   for (k in 1:nspec) {
      nSiteP [k] <- sum(p[,k]) 
   }

   # expected number of species per site
   for (i in 1:nsite) {
      totSp [i] <- sum(p[i,]) 
   }

   # mean number of species per site
   for (i in 1:nsite) {
      meanSp [i] <- mean(p[i,]) 
   }

}
    
